ucscDb <- dbConnect(MySQL(),user='genome',
host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb,"show databases;");
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user='genome',db='hg19',
host='genome-mysql.cse.ucsc.edu')
allTables<-dbListTables(hg19)
View(ucscDb)
dbListFields(hg19)
dbDisconnect()
dbDisconnect(ucscDb)
install.packages("hdf5r")
library(hdf5r)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/install")
source("http://bioconductor.org/install")
biocLite.R
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
source("http://bioconductor.org/biocLite.R")
BiocManager('rhdf5')
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
BiocManager::install("rhdf5")
BiocManager::install("rhdf5")
BiocManager::install("rhdf5")
library("rhdf5")
created = h5createFile("example.h5")
creatted
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
h5read("example.h5")
h5read("example.h5")
h5read("example.h5","foo")
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode
library(XML)
library(XML)
url = 'https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en'
html<- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//title",xmlValue)
library(XML)
url = 'https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en'
html<- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
url = "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
html
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
install.packages("httr")
library(httr)
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText = TRUE)
xpathApply(parsedHtml,"//title",xmlValue)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
myapp = ouath_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
myapp = ouath_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
sig = sign_oauth1.0(myapp,
token = "1058344490677587968-agnbZAfvxT8o1iR6VwAmZomiuNavlj",
token_secret = "VB7iV3B9qY0Y8hUKeLGcKAERXz9FNQOlIN69rBqVG7x5y")
myapp = oauth_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
sig = sign_oauth1.0(myapp,
token = "1058344490677587968-agnbZAfvxT8o1iR6VwAmZomiuNavlj",
token_secret = "VB7iV3B9qY0Y8hUKeLGcKAERXz9FNQOlIN69rBqVG7x5y")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
install.packages("jsonlite")
myapp = oauth_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
myapp = oauth_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
sig = sign_oauth1.0(myapp,
token = "1058344490677587968-agnbZAfvxT8o1iR6VwAmZomiuNavlj",
token_secret = "VB7iV3B9qY0Y8hUKeLGcKAERXz9FNQOlIN69rBqVG7x5y")
myapp = oauth_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
oauth
myapp = oauth_app("twitter",
key="
KuiNOozMr8pcwpGZ95lJkYLD1",
secret="
iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
sig = sign_oauth1.0(myapp,
token = "1058344490677587968-agnbZAfvxT8o1iR6VwAmZomiuNavlj",
token_secret = "VB7iV3B9qY0Y8hUKeLGcKAERXz9FNQOlIN69rBqVG7x5y")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
myapp = oauth_app("twitter",
key="KuiNOozMr8pcwpGZ95lJkYLD1",
secret="iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
install.packages("twitteR")
myapp = oauth_app("twitter",
key="KuiNOozMr8pcwpGZ95lJkYLD1",
secret="iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
oauth_app(
)
myapp = oauth_app("twitter",
key="KuiNOozMr8pcwpGZ95lJkYLD1",
secret="iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
library(httr)
myapp = oauth_app("twitter",
key="KuiNOozMr8pcwpGZ95lJkYLD1",
secret="iKEKgynTiRgcU3353neRI0pxHP132bOmeeHGgGnryX5rBdw2p0")
sig = sign_oauth1.0(myapp,
token = "1058344490677587968-agnbZAfvxT8o1iR6VwAmZomiuNavlj",
token_secret = "VB7iV3B9qY0Y8hUKeLGcKAERXz9FNQOlIN69rBqVG7x5y")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(dplyr)
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
read.csv(path2csv)
mydf<-read.csv(path2csv)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
library(swirl)
swirl()
packageVersion("dplyr")
cran <- tbl_df(mydf)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package=='swirl')
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <="3.0.2", country == "IN")
filter(cran, country == "US"|country == "IN")
filter(cran, size>100500,r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select(cran)
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country (ascending), r_version (descending),ip_id (ascending))
arrange(cran2, country , r_version,ip_id)
arrange(cran2, country , desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
View(cran)
by_package <- group_by(.cran,package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
View(by_package)
View(by_package)
View(cran)
View(cran)
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries =n_distinct(country) ,
avg_bytes = mean(size) )
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum,count>679)
top_counts filter(pack_sum,count>679)
top_counts <-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
?parse_number
?mutate
submit()
submit()
?parse_number
submit()
gdg
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm,col = "green")
rug(ppm)
low
high
hist(ppm,col = "green",breaks = 100)
rug(ppm)
hist(ppm,col = "green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg)
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data = pollution, pm25~region)
boxplot(data = pollution, pm25~region,col='red')
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution,)
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
plot(pollution,pm25,)
View(pollution)
with(pollution, plot(latitude, pm25))
abline(h=12.lwd=2.lty=2)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude, pollution$pm25,col=pollution$region)
plot(pollution$latitude, ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<- subset(pollution,region=='west')
plot(west$latitude,west$pm25,main="West")
east<- subset(pollution,region=='east')
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
?Devices
plot(faithful$eruptions,faithful$waiting)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting,main='Old Faithful Geyser data'))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting,main='Old Faithful Geyser data'))
with(faithful, plot(eruptions, waiting))
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting,main='Old Faithful Geyser data'))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed), max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot()
xyplot()
xyplot(Life.Exp ~ Income| region,state,c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm = T)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
plot()
plot(c(1,2,3))
table(airquality$Month)
swirl()
library(swirl)
swirl()
hist(airquality$Ozone)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality,xlab="Month",ylab = "Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City"
title(main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
par(length)
length(par())
par()
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set='n')
plot(airquality$Wind, type="n",airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
airquality
may <- subset(airquality, Month==5)
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="blue",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","OtherMonths"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(h=median(airquality$Wind),ity=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par()
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone,title="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
setwd("C:/Users/DELL/Desktop/Coursera/R programming/Course 4/week 1/ExData_Plotting1")
library(dplyr)
library(dplyr)
library(tidyr)
pow <- read.delim("household_power_consumption.txt",sep=";")
pow$Date <- as.Date(pow$Date,"%d/%m/%Y")
pow <- subset(pow,pow$Date>='2007-02-01'&pow$Date<='2007-02-02')
pow <- subset(pow,pow$Sub_metering_1!='?'&pow$Sub_metering_2!='?'&pow$Sub_metering_3!='?')
pow$Global_active_power <- as.numeric(pow$Global_active_power)
pow$Global_active_power <- pow$Global_active_power/1000
library(dplyr)
library(tidyr)
pow <- read.delim("household_power_consumption.txt",sep=";")
pow$Date <- as.Date(pow$Date,"%d/%m/%Y")
pow <- subset(pow,pow$Date>='2007-02-01'&pow$Date<='2007-02-02')
pow$Global_active_power <- as.numeric(pow$Global_active_power)
pow$Global_active_power <- pow$Global_active_power/1000
hist(pow$Global_active_power,xlab = "Global Active power (kilowatts)",breaks=15)
library(dplyr)
library(tidyr)
pow <- read.delim("household_power_consumption.txt",sep=";")
pow$Date <- as.Date(pow$Date,"%d/%m/%Y")
pow <- subset(pow,pow$Date>='2007-02-01'&pow$Date<='2007-02-02')
pow$Global_active_power <- as.numeric(pow$Global_active_power)
pow$Global_active_power <- pow$Global_active_power/1000
plot(pow$Time,pow$Global_active_power,type = 'l',xlab="Time",ylab = "Global Active power (kilowatts)",breaks=15)
library(dplyr)
library(tidyr)
pow <- read.delim("household_power_consumption.txt",sep=";")
pow$Date <- as.Date(pow$Date,"%d/%m/%Y")
pow <- subset(pow,pow$Date>='2007-02-01'&pow$Date<='2007-02-02')
pow <- subset(pow,pow$Sub_metering_1!='?'&pow$Sub_metering_2!='?'&pow$Sub_metering_3!='?')
pow$Sub_metering_1 <- as.numeric(pow$Sub_metering_1)
pow$Sub_metering_2 <- as.numeric(pow$Sub_metering_2)
pow$Sub_metering_3 <- as.numeric(pow$Sub_metering_3)
plot(pow$Time,pow$Sub_metering_1,xlab="Time",ylab = "Energy sub metering")
lines(pow$Time,pow$Sub_metering_2,col='red')
lines(pow$Time,pow$Sub_metering_3,col='blue')
legend(1000,32,legend=c("Sub metering 1", "Sub metering 2","Sub metering 3"),
col=c("black", "red",'blue'), lty=1:2, cex=0.8)
library(dplyr)
library(tidyr)
pow <- read.delim("household_power_consumption.txt",sep=";")
pow$Date <- as.Date(pow$Date,"%d/%m/%Y")
pow <- subset(pow,pow$Date>='2007-02-01'&pow$Date<='2007-02-02')
pow <- subset(pow,pow$Sub_metering_1!='?'&pow$Sub_metering_2!='?'&pow$Sub_metering_3!='?')
pow$Global_active_power <- as.numeric(pow$Global_active_power)
pow$Global_active_power <- pow$Global_active_power/1000
pow$Global_reactive_power <- as.numeric(pow$Global_reactive_power)
pow$Global_reactive_power <- pow$Global_reactive_power/1000
pow$Sub_metering_1 <- as.numeric(pow$Sub_metering_1)
pow$Sub_metering_2 <- as.numeric(pow$Sub_metering_2)
pow$Sub_metering_3 <- as.numeric(pow$Sub_metering_3)
pow$Voltage <- as.numeric(pow$Voltage)
par(mfrow=c(2,2))
plot(pow$Time,pow$Global_active_power,type = 'l',xlab="Time",ylab = "Global Active power (kilowatts)")
plot(pow$Time,pow$Voltage,type = 'l',xlab="Time",ylab = "Voltage")
plot(pow$Time,pow$Sub_metering_1,xlab="Time",ylab = "Energy sub metering")
lines(pow$Time,pow$Sub_metering_2,col='red')
lines(pow$Time,pow$Sub_metering_3,col='blue')
legend(1000,32,legend=c("Sub metering 1", "Sub metering 2","Sub metering 3"),
col=c("black", "red",'blue'), cex=0.4)
plot(pow$Time,pow$Global_reactive_power,type = 'l',xlab="Time",ylab = "Global Reactive power (kilowatts)")
